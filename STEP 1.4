1)  Problem statement
You are given a number ’n’.
Find the number of digits of ‘n’ that evenly divide ‘n’.
Note:
A digit evenly divides ‘n’ if it leaves no remainder when dividing ‘n’.
Example:
Input: ‘n’ = 336
Output: 3

solution 

int countDigits(int n){
	int count = 0;
	int per = n;
	while(n>0){
		int a = n%10;
        if (a != 0 && per % a == 0){
            count++;}
        n=n/10;
	}
	return count;	
}


2) Problem statement
There is a song concert going to happen in the city. The price of each ticket is equal to the number obtained after reversing the bits of a given 32 bits unsigned integer ‘n’.

solution 

long reverseBits(long n) {
    long ans = 0;
    for(int i= 0 ; i<32; i++){
        ans<<=1;
        ans |= n & 1;
        n>>=1;
    }
    return ans;
}


3) Problem Statement 
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

solution 

class Solution {
public:
    int reverse(int x) {
        int ans = 0;
        while(x!=0){
            int digit = x%10;
            if((ans > INT_MAX/10)||(ans < INT_MIN/10)){
                return 0;
            }
            ans = (ans*10)+digit;
            x=x/10;
        }
        return ans;

        
    }
};


4)Problem statement
Check whether a given number ’n’ is a palindrome number.

Note :
Palindrome numbers are the numbers that don't change when reversed.
You don’t need to print anything. Just implement the given function.

solution 

int reverse(int x) {
    int ans = 0;
    while(x!=0){
    int digit = x%10;
    ans = (ans*10)+digit;
    x=x/10;
        }
    return ans;
    }

bool palindrome(int n){
    if(reverse(n) == n){
        return true;
    }
    else{
        return false;
    }
}


5) Problem Statement 
Given an integer x, return true if x is a palindrome, and false otherwise.

solution 

class Solution {
public:
    bool isPalindrome(int x) {
            // Write your code here
    long long revNum = 0;
    long long orig = x;
    while(x>0)
    {
        int ad=x%10;
        revNum=(revNum*10)+ad;
        x=x/10;
    }
    if(orig==revNum)
    {
        return true;
    }
    else{
        return false;
    }
        
    }
};


6) problem statement 
You are given two integers 'n', and 'm'.
Calculate 'gcd(n,m)', without using library functions.

solution 

int calcGCD(int n, int m){
    int div = 1;
    if(n>m){
        for(int i = 1 ; i<=m ;i++){
            if( n%i == 0 && m%i ==0){
                div = i;
            }
        }
    }

    else{
        for(int i = 1 ; i<=n ;i++){
            if( n%i == 0 && m%i ==0){
                div = i;
            }
        }     
    }

    return div;
}


7)Problem statement
You are given an integer 'n'.
Return 'true' if 'n' is an Armstrong number, and 'false' otherwise.
Note:
An Armstrong number is a number (with 'k' digits) such that the sum of its digits raised to 'kth' power is equal to the number itself. For example, 371 is an Armstrong number because 3^3 + 7^3 + 1^3 = 371.

solution 

bool checkArmstrong(int n){
	int a = n;
	int cnt = 0;

	while(a){
		a/=10;
		cnt++;
	}

	int b = n;
	int sum = 0;

	while(b){
		int dig = b%10;
		sum += pow( dig , cnt);
		b/=10;
	}

	if( sum == n) return true;
	else return false;
}


8)Problem statement
You are given an integer ‘n’.
Function ‘sumOfDivisors(n)’ is defined as the sum of all divisors of ‘n’.
Find the sum of ‘sumOfDivisors(i)’ for all ‘i’ from 1 to ‘n’.

solution 

int sumOfAllDivisors(int n){
	int sum = 0;

	for(int i = 1; i<=n ; i++){
		for(int j = 1; j<=i;j++){
			if(i%j == 0){
				sum += j;
			}
		}
	}
	return sum;
}


9) Problem statement
A prime number is a positive integer that is divisible by exactly 2 integers, 1 and the number itself.
You are given a number 'n'.
Find out whether 'n' is prime or not.

solution 

bool isPrime(int n){
	if(n == 1){
		return false;
	}

	for( int i = 2; i<sqrt(n) ; i++){
		if(n%i == 0){
			return false;
		}
	}
	return "YES";
}
