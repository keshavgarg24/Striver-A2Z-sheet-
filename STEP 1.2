## patterns problems 

1) Problem statement
Sam is making a forest visualizer. An N-dimensional forest is represented by the pattern of size NxN filled with ‘*’.

For every value of ‘N’, help sam to print the corresponding N-dimensional forest.

Example:
Input: ‘N’ = 3

Output: 
* * *
* * *
* * *

solution 

void nForest(int n) {
	for(int i = 0; i<n ; i++){
		for(int j = 0 ; j<n ; j++){
			cout<<"* ";
		}
		cout<<endl;
	}
}


2) Sam is making a forest visualizer. An N-dimensional forest is represented by the pattern of size NxN filled with ‘*’.

An N/2-dimensional forest is represented by the lower triangle of the pattern filled with ‘*’.

For every value of ‘N’, help sam to print the corresponding N/2-dimensional forest.

Example:
Input:  ‘N’ = 3

Output: 
* 
* *
* * *

solution 

void nForest(int n) {
	for(int i= 0 ; i<n ; i++){
		for(int j =0; j<=i ;j++){
			cout<<"* ";
		}
		cout<<endl;
	}
}


3) Problem statement
Sam is making a Triangular painting for a maths project.

An N-dimensional Triangle is represented by the lower triangle of the pattern filled with integers starting from 1.

For every value of ‘N’, help sam to print the corresponding N-dimensional Triangle.

Example:
Input: ‘N’ = 3

Output: 
1
1 2 
1 2 3

solution 

void nTriangle(int n) {
	for(int i =1 ; i<=n; i++){
		for(int j = 1; j<=i ; j++){
			cout<<j<<" ";
		}
		cout<<endl;
	}
}


4)Problem statement
Sam is making a Triangular painting for a maths project.

An N-dimensional Triangle is represented by the lower triangle of the pattern filled with integers representing the row number.

For every value of ‘N’, help sam to print the corresponding Triangle.

Example:
Input: ‘N’ = 3

Output: 
1
2 2 
3 3 3

solution 

void triangle(int n) {
	for(int i = 1; i<=n;i++){
		for(int j = 1 ; j<=i;j++){
			cout<<i<<" ";
		}
		cout<<endl;
	}
}


5) Problem statement
Sam is planting trees on the upper half region (separated by the left diagonal) of the square shared field.

For every value of ‘N’, print the field if the trees are represented by ‘*’.

Example:
Input: ‘N’ = 3

Output: 
* * *
* *
*

solution 

void seeding(int n) {
	for(int i = 1 ; i<=n; i++){
		for(int j=1; j<=n-i+1; j++){
			cout<<"* ";
		}
		cout<<endl;
	}
}

6) Problem statement
Aryan and his friends are very fond of the pattern. For a given integer ‘N’, they want to make the Reverse N-Number Triangle.

Example:
Input: ‘N’ = 3

Output: 

1 2 3
1 2
1

solution 

void nNumberTriangle(int n) {
    	for(int i = 1 ; i<=n; i++){
		for(int j=1; j<=n-i+1; j++){
			cout<<j<<" ";
		}
		cout<<endl;
	}
}


7) Problem statement
Ninja was very fond of patterns. For a given integer ‘N’, he wants to make the N-Star Triangle.

Example:
Input: ‘N’ = 3

Output: 

  *
 ***
*****

solution 

void nStarTriangle(int n) {
    for(int i = 0; i<n ; i++){

        for(int j = 0 ; j<(n-i-1); j++){
            cout<<" ";
        }

        for(int j = 0; j<(2*i +1) ; j++){
            cout<<"*";
        }

        for(int j =0 ; j<(n-i-1); j++){
            cout<<" ";
        }
        cout<<endl;
    }
}


8) Problem statement
Ninja was very fond of patterns. For a given integer ‘N’, he wants to make the Reverse N-Star Triangle.

Example:
Input: ‘N’ = 3

Output: 

*****
 ***
  *

  solution 

  void nStarTriangle(int n) {
        for(int i = 0; i<n ; i++){

            for(int j = 0 ; j<i; j++){
                cout<<" ";
            }

            for(int j = 0; j<(2*n -(2*i + 1)) ; j++){
                cout<<"*";
            }

            for(int j =0 ; j<i; j++){
                cout<<" ";
            }
        cout<<endl;
    }
}


9) Problem statement
Ninja was very fond of patterns. For a given integer ‘N’, he wants to make the N-Star Diamond.

Example:
Input: ‘N’ = 3

Output: 

  *
 ***
*****
*****
 ***

 solution 

 void nStarDiamond(int n) {
        for(int i = 0; i<n ; i++){

        for(int j = 0 ; j<(n-i-1); j++){
            cout<<" ";
        }

        for(int j = 0; j<(2*i +1) ; j++){
            cout<<"*";
        }

        for(int j =0 ; j<(n-i-1); j++){
            cout<<" ";
        }
        cout<<endl;
    }

            for(int i = 0; i<n ; i++){

            for(int j = 0 ; j<i; j++){
                cout<<" ";
            }

            for(int j = 0; j<(2*n -(2*i + 1)) ; j++){
                cout<<"*";
            }

            for(int j =0 ; j<i; j++){
                cout<<" ";
            }
        cout<<endl;
    }
    }


    10) Problem statement
Ninja was very fond of patterns. For a given integer ‘N’, he wants to make the N-Star Rotated Triangle.

Example:
Input: ‘N’ = 3

Output: 

*
**
***
**
*

solution 

void nStarTriangle(int n) {
    for(int i = 1 ; i<= 2*n-1;i++){
        int str = i;
        if(i>n) str = 2*n-i;
        for(int j = 1 ; j<= str ; j++){
            cout<<"*";
        }
        cout<<endl;
    }
}


11) Problem statement
Aryan and his friends are very fond of the pattern. For a given integer ‘N’, they want to make the N-Binary Number Triangle.

You are required to print the pattern as shown in the examples below.

Example:
Input: ‘N’ = 3

Output: 

1
0 1
1 0 1

solution 

void nBinaryTriangle(int n) {
    int pr = 1;
    for(int i = 1; i<=n; i++){
        if( i%2 == 0) pr = 0;
        else pr = 1;
        for(int j = 1 ; j<=i ; j++ ){
            cout<< pr << " " ;
            pr = 1-pr;
        }
        cout<<endl;
    }
}


12) Problem statement
Aryan and his friends are very fond of the pattern. They want to make the Reverse N-Number Crown for a given integer' N'.

Given 'N', print the corresponding pattern.

Example:
Input: ‘N’ = 3

Output: 

1         1
1 2     2 1
1 2 3 3 2 1

solution 

void numberCrown(int n){
    for(int i = 1 ; i <= n; i++){
      for(int j = 1 ; j <= i; j++){
        cout<<j<<" ";
        }

      for(int j = i ; j >= 1; j--){
        cout<<j<<" ";
        }
      cout<<endl;
    }
}


13) Problem statement
Aryan and his friends are very fond of patterns. For a given integer ‘N’, they want to make the Increasing Number Triangle.

Example:
Input: ‘N’ = 3

Output: 

1
2 3
4 5 6

solution 

void nNumberTriangle(int n) {
    int pr=1;
    for(int i = 1 ; i <= n ; i++){
        for(int j = 1 ; j <= i ; j++){
            cout<<pr<<" ";
            pr++;
        }
        cout<<endl;
    }
}


14) Problem statement
Aryan and his friends are very fond of patterns. For a given integer ‘N’, they want to make the Increasing Letter Triangle.

Example:
Input: ‘N’ = 3

Output: 

A
A B
A B C

solution 

void nLetterTriangle(int n) {
    for(int i =1 ; i<=n; i++){
		for(int j = 1; j<=i ; j++){
			cout<<char('A'+j-1)<<" ";
		}
		cout<<endl;
	}
}


15) Problem statement
Aryan and his friends are very fond of patterns. For a given integer ‘N’, they want to make the Reverse Letter Triangle.

You must print a matrix corresponding to the given Reverse Letter Triangle.

Example:
Input: ‘N’ = 3

Output: 

A B C
A B
A

solution 

void nLetterTriangle(int n) {
     	for(int i = 1 ; i<=n; i++){
		for(int j=1; j<=n-i+1; j++){
			cout<<char('A'+j-1)<<" ";
		}
		cout<<endl;
	}
}


16) Problem statement
Sam is curious about Alpha-Ramp, so he decided to create Alpha-Ramp of different sizes.

An Alpha-Ramp is represented by a triangle, where alphabets are filled from the top in order.

For every value of ‘N’, help sam to return the corresponding Alpha-Ramp.

Example:
Input: ‘N’ = 3

Output: 
A
B B
C C C

solution 

void alphaRamp(int n) {
    for(int i = 1 ; i<=n; i++){
        for(int j = 1 ; j <= i ; j++){
            cout<<char('A'+i-1)<<" ";
        }
        cout<<endl;
    }
}



17) Problem statement
Sam is curious about Alpha-Hills, so he decided to create Alpha-Hills of different sizes.

An Alpha-hill is represented by a triangle, where alphabets are filled in palindromic order.

For every value of ‘N’, help sam to return the corresponding Alpha-Hill.

Example:
Input: ‘N’ = 3

Output: 
    A
  A B A
A B C B A

solution 

void alphaHill(int n) {
        for(int i = 0; i<n ; i++){

        for(int j = 1; j<=(n-i-1); j++){
            cout<<" ";
        }

        char ch = 'A';
        int brk = (2*i+1)/2;
        for(int j = 1 ; j<=(2*i+1); j++){
            cout<<ch<<" ";
            if(j<=brk) ch++;
            else ch--;
        }

        for(int j =1 ; j<=(n-i-1); j++){
            cout<<" ";
        }
        cout<<endl;
    }
}


18) Problem statement
Sam is researching on Alpha-Triangles. So, he needs to create them for different integers ‘N’.

An Alpha-Triangle is represented by the triangular pattern of alphabets in reverse order.

For every value of ‘N’, help sam to print the corresponding Alpha-Triangle.

Example:
Input: ‘N’ = 3

Output: 
C
C B 
C B A

solution 

void alphaTriangle(int n) {
    for(int i = 1 ; i<=n; i++){
        for(int j = 1 ; j<=i; j++){
            cout<<char('A'+n-j)<<" ";
        }
        cout<<endl;
    }
}


19) Problem statement
Sam is curious about symmetric patterns, so he decided to create one.

For every value of ‘N’, return the symmetry as shown in the example.

Example:
Input: ‘N’ = 3

Output: 
* * * * * * 
* *     * * 
*         * 
*         * 
* *     * * 
* * * * * * 

solution 

void symmetry(int n) {
    int spaces = 0;
    for(int i = 0 ; i < n ; i++){
        for(int j = 1 ; j <= n-i+1 ; j++){
            cout<<"* ";
        }

        for(int j = 0 ; j< spaces ; j++){
            cout<<" ";
        }

        for(int j = 1 ; j <= n-i+1 ; j++){
            cout<<"* ";
        }

        spaces += 2; 
        cout<<endl;
    }

    int spaces = 2*n - 2;
    for(int i = 1 ; i <= n ; i++){
        for(int j = 1 ; j <= i ; j++){
            cout<<"* ";
        }

        for(int j = 0 ; j< spaces ; j++){
            cout<<" ";
        }

        for(int j = 1 ; j <= i ; j++){
            cout<<"* ";
        }

        spaces -= 2; 
        cout<<endl;
    }

}





