1) Find Character Case

Problem statement
Write a program that takes a character as input and prints 1, 0, or -1 according to the following rules.
1, if the character is an uppercase alphabet (A - Z).
0, if the character is a lowercase alphabet (a - z).
-1, if the character is not an alphabet.

solution 
#include<iostream>
using namespace std;

int main() {
	char ch;
	cin>>ch;

	if(ch>=65 && ch<=90){
		cout<<"1"<<endl;
	}
	else if(ch>=97 && ch<=122){
		cout<<"0"<<endl;
	}
	else{
		cout<<"-1"<<endl;
	}
	
}


here , i have not used the return statament as in case of -1 , it gives abnormal hemographic TLE. 


2) Data Type

Problem statement
Data type refers to the type of value a variable has and the way the computer interprets it.



Each data type has a different size. You’ve studied 5 different data types and the sizes of the data types:

Integer: 4 bytes
Long: 8 bytes
Float: 4 bytes
Double: 8 bytes
Character: 1 byte


You’re given a data type. Print its size in bytes.

solution 

int dataTypes(string type) {
	if(type=="Integer"){
		return 4;
	}
	else if(type=="Long"){
		return 8;
	}
	else if(type=="Float"){
		return 4;
	}
	else if(type=="Double"){
		return 8;
	}
	else if(type=="Character"){
		return 1;
	}
}


3)   if-else (Decision Making)

Problem statement
Programming languages have some conditional / decision-making statements that execute when some specific condition is fulfilled.



If-else is one of the ways to implement them.



You are given two numbers 'a' and 'b'.



Compare the numbers and print the relation.



Print “smaller”, “greater” or “equal” when ‘a’ is smaller than ‘b’, greater than ‘b’, or equal to ‘b’ respectively.

solution 

string compareIfElse(int a, int b) {
	if(a<b){
		return "smaller";
	}
	else if (a>b){
		return "greater";
	}
	else if (a==b){
		return "equal";
	}
}


4) Switch case statement 

Problem statement
Programming languages have some conditional / decision-making statements that execute when some specific condition is fulfilled.
Switch-case is one of the ways to implement them.
In a menu-driven program, the user is given a set of choices of things to do (the menu) and then is asked to select a menu item.
There are 2 choices in the menu:
Choice 1 is to find the area of a circle having radius 'r'.
Choice 2 is to find the area of a rectangle having dimensions 'l' and 'b'.
You are given the choice 'ch' and an array 'a'.
If ‘ch’ is 1, ‘a’ contains a single number ‘r’. If ‘ch’ is 2, ‘a’ contains 2 numbers, ‘l’ and ‘b’.
Consider the choice and print the appropriate area.

solution

double areaSwitchCase(int ch, vector<double> a) {
  switch (ch) {
  case 1:
    return (M_PI * a[0] * a[0]);
    break;

  case 2:
    return (a[0] * a[1]);
    break;

  default:
    cout << "invalid";
  }
  return 0;
}


5) Nth Fibonacci Number

Problem statement
The n-th term of Fibonacci series F(n), where F(n) is a function, is calculated using the following formula -
F(n) = F(n - 1) + F(n - 2), 
Where, F(1) = 1, F(2) = 1
Provided 'n' you have to find out the n-th Fibonacci Number. Handle edges cases like when 'n' = 1 or 'n' = 2 by using conditionals like if else and return what's expected.
"Indexing is start from 1"

solution 

#include<bits/stdc++.h>
using namespace std;

int F(int n){
        if(n==1 || n==2){
                return 1;
        } 
        else {
                return F(n - 1) + F(n - 2);
        }
}


int main()
{
        int n ;
        cin>>n;

        if(n<0){
                cout<<"invalid number"<<endl;
        }

        else {
                cout << F(n) << endl;
        }
        return 0;
}


6) 	cout<< evenSum << " " << oddSum ;

Problem statement
Write a program to input an integer 'n' and print the sum of all its even digits and the sum of all its odd digits separately.
Digits mean numbers, not places! That is, if the given integer is "132456", even digits are 2, 4, and 6, and odd digits are 1, 3, and 5.
Constraints
0<= 'n' <=10000

solution

#include<iostream>
using namespace std;

int main() {
	int n;
	cin>>n;
	int oddSum = 0;
	int evenSum = 0;

	while(n>0){
		int a =n%10;
		
		if(a%2 == 0){
			evenSum=evenSum+a;
		}
		else{
			oddSum=oddSum+a;
		}
		n=n/10;

	}
	cout<< evenSum << " " << oddSum ;
	return 0 ;

	
}


8) FA-1 ECE

Problem statement
Functions - Take this coding challenge to test your coding skills to
-define a function
-pass arguments by value to a function
-pass arguments by reference to a function
This coding challenge is organized in the following way:
First line of input reads an integer to select the coding challenge:
-Reading value '1' selects the coding-challenge 1 ( tests the ability to define a function and pass arguments by value.)
-Reading value '2' selects the coding challenge 2 (tests the ability to pass arguments by reference to a function)Coding Challenge -1
Define a function named "Maximum" that accepts two integers (pass by value) as arguments and returns the greatest of the two arguments.
Coding Challenge -2
Define a function named "Swap" that accepts two integers (pass by reference) as arguments and swaps their value.

solution 

#include <iostream>
using namespace std;
int Maximum(int x, int y)
{
	if(x>y){
		return x;
	}
	else{
		return y;
	}
}
void Swap(int &x, int &y)
{
	int temp ;
	temp = x;
	x=y;
	y=temp;
}
int main()
{
	int test, a, b, r;
	cin >> test;
	cin >> a >> b;
	switch (test)
	{
	case 1:
		r = Maximum(a, b);
		cout << r;
		break;
	case 2:
		Swap(a, b);
		cout << a << " " << b;
		break;
	default:
		cout << "Invalid test option";
	}
	return 0;
}
