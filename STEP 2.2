1)Problem statement
You are given the starting 'l' and the ending 'r' positions of the array 'ARR'.
You must sort the elements between 'l' and 'r'.

soltuion 

#include <bits/stdc++.h>
#include <vector>
using namespace std;

void merge(int arr[], int l, int mid, int r) {
    vector<int> temp; 
    int left = l;     
    int right = mid + 1;   

    while (left <= mid && right <= r) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        }
        else {
            temp.push_back(arr[right]);
            right++;
        }
    }

    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }

    while (right <= r) {
        temp.push_back(arr[right]);
        right++;
    }

    for (int i = l; i <=r; i++) {
        arr[i] = temp[i - l];
    }
}
void mergeSort(int arr[], int l, int r) {
    if(l>=r){return;}
    int mid = (l+r)/2;
    mergeSort(arr,l,mid);
    mergeSort(arr,mid+1,r);
    merge(arr,l,mid,r);
}
void mergeSort(vector<int>& arr, int l, int r) {
    int n = arr.size();
    int* arrPtr = &arr[0];
    mergeSort(arrPtr, l, r);
}



2) Problem statement
You are given an integer array 'arr' of size 'N'.
You must sort this array using 'Bubble Sort'. "recursively"

solution 

void bubbleSort(vector<int>& arr, int n) 
{
    if(n ==1) return;
    for(int i = 0; i<=n-2;i++){
        if(arr[i]>arr[i+1]){
            swap(arr[i],arr[i+1]);
        }
    }
    bubbleSort(arr, n-1);
}


3) Problem statement
You are given an integer array 'arr' of size 'N'.
You must sort this array using 'Insertion Sort' recursively.

solution 

void insertionSort(int arr[], int n)
{
    if(n<=1) return;
    insertionSort(arr, n-1);
    int last = arr[n-1];
    int j = n-2;
    while( j >= 0 && arr[j]>last){
        arr[j+1] = arr[j];
        j--;
    }
    arr[j+1] = last;
}


4)Problem statement
Given the 'start' and the 'end'' positions of the array 'input'. Your task is to sort the elements between 'start' and 'end' using quick sort.

solution 

int partitionArray(int input[], int start, int end) {
	int pivot = input[start];
	int i = start;
	int j = end;
	while( i<j ){
		while(input[i] <= pivot && i<= end-1){
			i++;
		}
		while(input[j] > pivot && j>= start+1){
			j--;
		}
		if(i < j) swap(input[i],input[j]);
	}
	swap(input[start],input[j]);
	return j;
}

void quickSort(int input[], int start, int end) {
	if(start<end){
		int p = partitionArray(input,start, end);
		quickSort(input, start, p-1);
		quickSort(input,p+1, end);
	}
}



